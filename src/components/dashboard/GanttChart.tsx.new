import React from "react";
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  Legend,
  ResponsiveContainer,
  ReferenceLine,
} from "recharts";
import { format, parseISO, isAfter, isBefore, addDays } from "date-fns";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";

interface Milestone {
  id?: string;
  date: string;
  milestone: string;
  owner: string;
  completion: number;
  status: "green" | "yellow" | "red";
}

interface GanttChartProps {
  milestones: Milestone[];
  projectTitle: string;
}

const GanttChart: React.FC<GanttChartProps> = ({ milestones, projectTitle }) => {
  // Sort milestones by date
  const sortedMilestones = [...milestones].sort((a, b) => {
    return new Date(a.date).getTime() - new Date(b.date).getTime();
  });

  // Find earliest and latest dates to set chart boundaries
  const today = new Date();
  let earliestDate = today;
  let latestDate = today;

  if (sortedMilestones.length > 0) {
    earliestDate = new Date(sortedMilestones[0].date);
    latestDate = new Date(sortedMilestones[sortedMilestones.length - 1].date);

    // Ensure we have at least a 30-day window
    if (isAfter(earliestDate, addDays(today, -15))) {
      earliestDate = addDays(today, -15);
    }
    if (isBefore(latestDate, addDays(today, 15))) {
      latestDate = addDays(today, 15);
    }
  } else {
    // Default to a 30-day window if no milestones
    earliestDate = addDays(today, -15);
    latestDate = addDays(today, 15);
  }

  // Generate all dates between earliest and latest for the x-axis
  const allDates: Date[] = [];
  let currentDate = new Date(earliestDate);
  while (currentDate <= latestDate) {
    allDates.push(new Date(currentDate));
    currentDate.setDate(currentDate.getDate() + 7); // Weekly intervals
  }

  // Format dates for display
  const formattedDates = allDates.map(date => format(date, "MMM d, yyyy"));

  // Prepare data for the Gantt chart
  const chartData = sortedMilestones.map((milestone, index) => {
    const date = new Date(milestone.date);
    const statusColor = {
      green: "#4ade80", // green
      yellow: "#facc15", // yellow
      red: "#f87171", // red
    }[milestone.status];

    // Find the position on the x-axis
    const datePosition = formattedDates.findIndex(
      formattedDate => formattedDate === format(date, "MMM d, yyyy")
    );
    
    // If exact date not found, find closest date
    let xPosition = datePosition;
    if (datePosition === -1) {
      // Find the closest date
      const closestDateIndex = allDates.reduce((closest, current, idx) => {
        const currentDiff = Math.abs(current.getTime() - date.getTime());
        const closestDiff = Math.abs(allDates[closest].getTime() - date.getTime());
        return currentDiff < closestDiff ? idx : closest;
      }, 0);
      xPosition = closestDateIndex;
    }

    return {
      name: milestone.milestone,
      owner: milestone.owner,
      date: milestone.date,
      formattedDate: format(date, "MMM d, yyyy"),
      completion: milestone.completion,
      status: milestone.status,
      statusColor,
      index, // Used for Y-axis positioning
      xPosition, // Position on the x-axis
    };
  });

  // Custom tooltip for the chart
  const CustomTooltip = ({ active, payload }: any) => {
    if (active && payload && payload.length) {
      const data = payload[0].payload;
      return (
        <div className="bg-white p-3 border border-gray-200 shadow-md rounded-md">
          <p className="font-bold">{data.name}</p>
          <p>Date: {data.formattedDate}</p>
          <p>Owner: {data.owner}</p>
          <p>Completion: {data.completion}%</p>
          <div className="flex items-center gap-2">
            <span>Status:</span>
            <span
              className="w-3 h-3 rounded-full"
              style={{ backgroundColor: data.statusColor }}
            ></span>
            <span className="capitalize">{data.status}</span>
          </div>
        </div>
      );
    }
    return null;
  };

  return (
    <Card className="w-full bg-gradient-to-b from-gray-100/90 to-white/90 backdrop-blur-sm border border-gray-100/50 shadow-sm">
      <CardHeader>
        <CardTitle className="text-blue-800">
          {projectTitle} - Milestone Timeline
        </CardTitle>
      </CardHeader>
      <CardContent>
        <div className="h-[500px] w-full">
          {chartData.length > 0 ? (
            <ResponsiveContainer width="100%" height="100%">
              <BarChart
                layout="vertical"
                data={chartData}
                margin={{ top: 20, right: 30, left: 150, bottom: 20 }}
              >
                <CartesianGrid strokeDasharray="3 3" horizontal={false} />
                <XAxis 
                  type="category" 
                  dataKey={(entry) => formattedDates[entry.xPosition] || entry.formattedDate}
                  tick={{ fill: "#64748b" }}
                  tickLine={{ stroke: "#64748b" }}
                  height={50}
                />
                <YAxis
                  type="number"
                  domain={[0, chartData.length - 1]}
                  dataKey="index"
                  tick={({ y, payload }) => {
                    const milestone = chartData[payload.value];
                    return (
                      <text
                        x={0}
                        y={y}
                        dy={4}
                        textAnchor="start"
                        fill="#64748b"
                        fontSize={12}
                      >
                        {milestone?.name?.length > 25
                          ? `${milestone.name.substring(0, 25)}...`
                          : milestone.name}
                      </text>
                    );
                  }}
                  axisLine={false}
                  tickLine={false}
                />
                <Tooltip content={<CustomTooltip />} />
                <Legend />
                <ReferenceLine
                  x={format(today, "MMM d, yyyy")}
                  stroke="#3b82f6"
                  strokeWidth={2}
                  strokeDasharray="3 3"
                  label={{
                    value: "Today",
                    position: "top",
                    fill: "#3b82f6",
                  }}
                />
                {chartData.map((milestone, index) => (
                  <Bar
                    key={index}
                    dataKey="index"
                    name="Milestone"
                    barSize={20}
                    fill={milestone.statusColor}
                    background={{ fill: "#eee" }}
                    radius={[4, 4, 4, 4]}
                    stackId="stack"
                    data={[milestone]}
                  />
                ))}
              </BarChart>
            </ResponsiveContainer>
          ) : (
            <div className="h-full flex items-center justify-center text-gray-500">
              No milestones available to display. Add milestones to see the Gantt chart.
            </div>
          )}
        </div>
      </CardContent>
    </Card>
  );
};

export default GanttChart;
