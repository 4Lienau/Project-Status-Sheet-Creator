import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2.45.6";
import OpenAI from "https://esm.sh/openai@4.0.0";

const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Headers":
    "authorization, x-client-info, apikey, content-type",
};

serve(async (req) => {
  // Handle CORS preflight request
  if (req.method === "OPTIONS") {
    return new Response("ok", { headers: corsHeaders });
  }

  try {
    console.log("Function invoked");
    
    // Log request headers for debugging
    const headers = {};
    req.headers.forEach((value, key) => {
      headers[key] = key.toLowerCase() === 'authorization' ? value.substring(0, 15) + '...' : value;
    });
    console.log("Request headers:", headers);
    
    const supabaseClient = createClient(
      Deno.env.get("SUPABASE_URL") ?? "",
      Deno.env.get("SUPABASE_ANON_KEY") ?? "",
    );
    
    console.log("Supabase URL:", Deno.env.get("SUPABASE_URL"));
    console.log("OpenAI API Key exists:", !!Deno.env.get("OPENAI_API_KEY"));

    // Get the authorization header
    const authHeader = req.headers.get("Authorization");
    if (!authHeader) {
      console.log("Missing authorization header");
      return new Response(
        JSON.stringify({ error: "Missing authorization header" }),
        {
          headers: { ...corsHeaders, "Content-Type": "application/json" },
          status: 401,
        },
      );
    }

    // Set up OpenAI client
    const openai = new OpenAI({
      apiKey: Deno.env.get("OPENAI_API_KEY"),
    });

    // Get the request body
    let requestBody;
    try {
      requestBody = await req.json();
      console.log("Request body:", {
        ...requestBody,
        message: requestBody.message?.substring(0, 20) + '...',
      });
    } catch (e) {
      console.error("Error parsing request body:", e);
      return new Response(
        JSON.stringify({ error: "Invalid JSON in request body" }),
        {
          headers: { ...corsHeaders, "Content-Type": "application/json" },
          status: 400,
        },
      );
    }
    
    const { projectId, message, conversationId } = requestBody;

    if (!projectId || !message) {
      console.log("Missing required fields");
      return new Response(
        JSON.stringify({ error: "Missing required fields" }),
        {
          headers: { ...corsHeaders, "Content-Type": "application/json" },
          status: 400,
        },
      );
    }

    // Get the current user
    console.log("Getting user from token");
    const {
      data: { user },
      error: userError,
    } = await supabaseClient.auth.getUser(authHeader.split(" ")[1]);
    
    if (userError) {
      console.error("User error:", userError);
    }
    
    if (!user) {
      console.log("User not found");
      return new Response(JSON.stringify({ error: "Unauthorized" }), {
        headers: { ...corsHeaders, "Content-Type": "application/json" },
        status: 401,
      });
    }
    
    console.log("User authenticated:", user.id);

    // Get project details
    console.log("Getting project details for ID:", projectId);
    const { data: project, error: projectError } = await supabaseClient
      .from("projects")
      .select(
        "title, description, value_statement, status, project_manager, sponsors, business_leads",
      )
      .eq("id", projectId)
      .single();

    if (projectError) {
      console.error("Project error:", projectError);
    }
    
    if (!project) {
      console.log("Project not found");
      return new Response(JSON.stringify({ error: "Project not found" }), {
        headers: { ...corsHeaders, "Content-Type": "application/json" },
        status: 404,
      });
    }
    
    console.log("Project found:", project.title);

    // Get or create conversation
    let convoId = conversationId;
    if (!convoId) {
      console.log("Creating new conversation");
      const { data: newConvo, error: convoError } = await supabaseClient
        .from("chat_conversations")
        .insert({
          project_id: projectId,
          user_id: user.id,
          title: `Chat about ${project.title}`,
        })
        .select()
        .single();

      if (convoError) {
        console.error("Conversation creation error:", convoError);
      }
      
      if (!newConvo) {
        console.log("Failed to create conversation");
        return new Response(
          JSON.stringify({ error: "Failed to create conversation" }),
          {
            headers: { ...corsHeaders, "Content-Type": "application/json" },
            status: 500,
          },
        );
      }
      
      console.log("New conversation created with ID:", newConvo.id);
      convoId = newConvo.id;
    } else {
      console.log("Using existing conversation ID:", convoId);
    }

    // Get conversation history
    console.log("Getting conversation history");
    const { data: history, error: historyError } = await supabaseClient
      .from("chat_messages")
      .select("role, content")
      .eq("conversation_id", convoId)
      .order("created_at", { ascending: true });

    if (historyError) {
      console.error("History error:", historyError);
    }
    
    console.log("Found", history?.length || 0, "previous messages");

    // Save user message
    console.log("Saving user message");
    const { error: userMsgError } = await supabaseClient
      .from("chat_messages")
      .insert({
        conversation_id: convoId,
        role: "user",
        content: message,
      });

    if (userMsgError) {
      console.error("User message save error:", userMsgError);
    }

    // Create system prompt with project context
    const systemPrompt = `You are Project Pilot, an expert project management assistant. You are helping with a project titled "${project.title}".\n\n
    Project details:\n
    - Description: ${project.description || "Not provided"}\n
    - Value Statement: ${project.value_statement || "Not provided"}\n
    - Status: ${project.status || "Active"}\n
    - Project Manager: ${project.project_manager || "Not assigned"}\n
    - Sponsors: ${project.sponsors || "Not assigned"}\n
    - Business Leads: ${project.business_leads || "Not assigned"}\n\n
    Provide specific, actionable advice tailored to this project. Be concise, practical, and helpful. Focus on best practices in project management and how they apply to this specific project.`;

    // Prepare messages for OpenAI
    const messages = [
      { role: "system", content: systemPrompt },
      ...history.map((msg) => ({ role: msg.role, content: msg.content })),
      { role: "user", content: message },
    ];

    // Get response from OpenAI
    console.log("Calling OpenAI");
    try {
      const completion = await openai.chat.completions.create({
        model: "gpt-3.5-turbo",
        messages,
        temperature: 0.7,
        max_tokens: 1000,
      });
      
      console.log("OpenAI response received");
      const responseContent = completion.choices[0].message?.content || "Sorry, I could not generate a response.";

      // Save assistant message
      console.log("Saving assistant message");
      const { error: assistantMsgError } = await supabaseClient
        .from("chat_messages")
        .insert({
          conversation_id: convoId,
          role: "assistant",
          content: responseContent,
        });

      if (assistantMsgError) {
        console.error("Assistant message save error:", assistantMsgError);
      }

      console.log("Returning successful response");
      return new Response(
        JSON.stringify({
          conversationId: convoId,
          message: responseContent,
        }),
        {
          headers: { ...corsHeaders, "Content-Type": "application/json" },
          status: 200,
        },
      );
    } catch (openaiError) {
      console.error("OpenAI API error:", openaiError);
      return new Response(
        JSON.stringify({
          error: "OpenAI API error: " + openaiError.message,
        }),
        {
          headers: { ...corsHeaders, "Content-Type": "application/json" },
          status: 500,
        },
      );
    }
  } catch (error) {
    console.error("Unhandled error:", error);
    return new Response(
      JSON.stringify({
        error: error.message || "An unexpected error occurred",
      }),
      {
        headers: { ...corsHeaders, "Content-Type": "application/json" },
        status: 500,
      },
    );
  }
});